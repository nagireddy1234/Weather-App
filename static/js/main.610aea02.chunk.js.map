{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","name","type","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","City","value","Country","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","undefined","stop","Components_Titles","Components_Form","this","Components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.610aea02.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => {\r\n  return(\r\n    <div className=\"titles__container\">  \r\n    <h1>Weather Finder </h1>\r\n    <p>Find out temperature, condition and more...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = props =>{\r\n  return( \r\n    <form onSubmit={props.getWeather} className=\"form__container\">\r\n    <input  name=\"City\" type=\"text\" placeholder=\"enter city..\" /> \r\n    <input name=\"Country\" type=\"text\" placeholder=\"enter country..\" />\r\n    <button>Get Weather</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props =>{\r\n  return(\r\n    <div className=\".weather__container\">\r\n      {\r\n        props.city && props.country && <p className=\"weather__key\"> Location:\r\n        <span className=\"weather__value\"> {props.city},{props.country}</span>\r\n        </p>\r\n      }\r\n\r\n      {\r\n        props.temperature && <p className=\"weather__key\"> Temp:\r\n        <span className=\"weather__value\">  {props.temperature} </span>\r\n        </p>\r\n      }\r\n\r\n      {\r\n        props.humidity && <p className=\"weather__key\"> Humidity:\r\n        <span className=\"weather__value\">  {props.humidity} </span>\r\n        </p> \r\n      }\r\n\r\n      {\r\n        props.description && <p className=\"weather__key\"> Description:\r\n        <span className=\"weather__value\"> {props.description} </span>\r\n        </p>\r\n      }\r\n\r\n      {\r\n        props.error && <p className=\"weather__key\">\r\n        <span className=\"weather__error\"> {props.error}</span>\r\n        </p>\r\n      }  \r\n    </div> \r\n  );\r\n};\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Titles from \"./Components/Titles\";\r\nimport \"./App.css\";\r\nimport Form from \"./Components/Form\";\r\nimport Weather from \"./Components/Weather\";\r\n\r\n\r\nconst API_KEY =\"a67d34336bd3fbc5aa3884cc0920de47\";\r\n\r\nclass App extends React.Component {\r\n\r\n   state={\r\n    temperature:\"\",\r\n    humidity:\"\",\r\n    city:\"\"\r\n  }\r\n\r\n   getWeather = async(e) => {\r\n    e.preventDefault();\r\n     const city = e.target.elements.City.value;\r\n     const country = e.target.elements.Country.value;\r\n     const api_call =await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\r\n    const data=await api_call.json();\r\n\r\n  if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description:data.weather[0].description,\r\n        error:undefined\r\n      });\r\n\r\n     } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Please enter the values...\"\r\n      });\r\n    }\r\n   }\r\n\r\n  render(){ \r\n  return(\r\n  <div className=\"Wrapper\">\r\n  <div className=\"container\">\r\n  <div className=\"row app_container\">\r\n    <div className=\"col-5 titles_container\">\r\n    <Titles />\r\n    </div>\r\n      <div className=\"col-7 form_container\">\r\n         <Form getWeather={this.getWeather} />\r\n            <Weather\r\n              temperature={this.state.temperature} \r\n              country={this.state.country}\r\n              humidity={this.state.humidity} \r\n              description={this.state.description}\r\n              city={this.state.city} \r\n              error={this.state.error}\r\n            />\r\n    </div>\r\n  </div> \r\n  </div>\r\n  </div>\r\n  );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}